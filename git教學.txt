一、查看  git 版本

二、初始設置Git帳號與郵件

# git config --global user.name "Jimmy"
# git config --global user.email "Jimmy@aseglobal.com


三.git 初始化

# git init

四. git 狀態查詢

# git status


五. 要加入新的檔案版本控制追蹤

在專案資料夾新增一個程式檔案 git教學.txt

# git add . 
# git status  =>此時新加入檔案會變成綠色
# git commit -m "增加一個版本控制檔案 git教學.txt"

如果要清空螢幕內容可下 # clear 指令清空螢幕畫面

六、如果檔案被修改，必須再次commit一次

七、查看檔案跟最初版本修改前後差異
# git diff (最初版本ID)


八、檢視log檔案內容變更快照： # git log

或者可以用精簡模式比對先前版本差異
# git log --oneline

九、如果發現最後版本錯誤，要還原到某個版本，可以輸入
# git checkout 版本ID  -- git教學.txt
# git status=> 查看狀態
# git commit -m "檔案XXX還原到(版本ID)的正確的版本"

十、如果要比較跟最初版本內容差異，則可輸入
# git diff 版本ID -- git教學.txt

十一、還原到某個版本控制階段：
# git checkout 版本ID --  git教學.txt 
# git status
# git commit -m "將git教學.txt 還原到 某個版本ID"


十二、如果要還原到某個版本，且要捨棄後續版本控制的話(此操作不可逆，要先備份)
# git reset --hard (某個版本ID) 



十三、定義不想被版本控制的檔案類型
在專案資料夾內新增一個 .gitignore檔案，在裡面定義不想被版本控制的檔案類型，如可填入(*.jpg、 *.png)


十四、新增一個git與Github教學影片連結檔案，再次push新增的檔案到Github雲端上
# git status
# git commit -m "新增一個git與Github教學影片連結檔案" 
# git push


十五、若要排除不要被git版本追蹤但又要保留目前目錄與檔案的話，可以下底下指令
# git rm -r --cached  檔案或目錄的完整路徑
# git status
# git commit -m "排除不做版控的目錄與檔案"

十六、萬一要提交到github遇到衝突或被拒絕推送，必須將有衝突的檔案或目錄，重新加入再做一次commit，且要合併github上面的版本，再重新推送變更到 github。如下：

確認遠端名稱與分支
# git remote -v

取得並合併遠端更新
#git pull origin main

如果有衝突 (conflict)

#git add <衝突已解決的檔案>
#git commit   # Git 會自動用合併訊息

合併完成後，重新推送
#git push origin main

預防建議

推送前先 git fetch origin 並 git log HEAD origin/main --oneline，檢視遠端新提交


十七、萬一初始版本被刪除，且遺失版本控制，要重新覆蓋最原始的專案目錄與檔案的話，可先解除原先有問題的專案目錄版本控制，再清空後重新覆蓋最原始版本專案

要解除現有專案目錄被git版本控制，可在Poweshell 模式下底下指令
#Remove-Item -Recurse -Force .git

重新覆蓋最原始專案目錄後，重新初始化該專案git版本控制，如下
重新初始化 Git 倉庫
#git init

覆蓋原有初始專案目錄，並做第初始化提交
#git add .
#git commit -m "重新初始化專案並提交新版本"

初始化後建議先推送最原始版本到 github或 gitlab保存備份
綁定遠端倉庫並推送

記得先到 github 或 gitlab 先建立該專案倉庫，如底下，再複製該專案倉庫git路徑貼上後再推送初始版本目錄檔案到雲端gitlab或 github
如果有多人使用，記得先建立自己的分支再提交，避免覆蓋主要main或覆蓋到別人相同專案目錄或檔案

#git remote add origin https://github.com/你的帳號/你的倉庫.git
#git push -u origin main

如需強制覆蓋遠端（慎用）
git push -u origin main --force


十八、如果你只想清空 commit 歷史，保持原本的 .gitignore 或其它設定，可以用「orphan branch」方式：
git checkout --orphan fresh-start
git add .
git commit -m "全新初始化，不帶舊有歷史"
git branch -D main
git branch -m main
git push -u origin main --force

這樣你不用刪除整個 .git 資料夾，也能快速清空所有舊有歷史。
